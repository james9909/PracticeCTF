

# This file was *autogenerated* from the file solution.sage
from sage.all_cmdline import *   # import sage library

_sage_const_165904771154636133744258537155010957898841320976199637310247946276091086685264203988382040434355973963755682908150999129715814054881305005279715109357952947956732031939179558028421896612221813299929875548130332311862653487519381871784418328675201518221252865046296276946334529508065441554563296058286139050519 = Integer(165904771154636133744258537155010957898841320976199637310247946276091086685264203988382040434355973963755682908150999129715814054881305005279715109357952947956732031939179558028421896612221813299929875548130332311862653487519381871784418328675201518221252865046296276946334529508065441554563296058286139050519); _sage_const_2 = Integer(2); _sage_const_36479 = Integer(36479); _sage_const_35291 = Integer(35291); _sage_const_48847 = Integer(48847); _sage_const_60509 = Integer(60509); _sage_const_41411 = Integer(41411); _sage_const_34337 = Integer(34337); _sage_const_63059 = Integer(63059); _sage_const_51307 = Integer(51307); _sage_const_35069 = Integer(35069); _sage_const_36353 = Integer(36353); _sage_const_44449 = Integer(44449); _sage_const_38677 = Integer(38677); _sage_const_48073 = Integer(48073); _sage_const_47869 = Integer(47869); _sage_const_39313 = Integer(39313); _sage_const_43987 = Integer(43987); _sage_const_41953 = Integer(41953); _sage_const_60859 = Integer(60859); _sage_const_36653 = Integer(36653); _sage_const_53527 = Integer(53527); _sage_const_39443 = Integer(39443); _sage_const_36467 = Integer(36467); _sage_const_58511 = Integer(58511); _sage_const_61403 = Integer(61403); _sage_const_50821 = Integer(50821); _sage_const_62233 = Integer(62233); _sage_const_46153 = Integer(46153); _sage_const_43313 = Integer(43313); _sage_const_32969 = Integer(32969); _sage_const_33871 = Integer(33871); _sage_const_61211 = Integer(61211); _sage_const_60127 = Integer(60127); _sage_const_50153 = Integer(50153); _sage_const_55339 = Integer(55339); _sage_const_39581 = Integer(39581); _sage_const_56501 = Integer(56501); _sage_const_65537 = Integer(65537); _sage_const_35023 = Integer(35023); _sage_const_33199 = Integer(33199); _sage_const_37277 = Integer(37277); _sage_const_57037 = Integer(57037); _sage_const_59651 = Integer(59651); _sage_const_38501 = Integer(38501); _sage_const_34057 = Integer(34057); _sage_const_61949 = Integer(61949); _sage_const_53773 = Integer(53773); _sage_const_53479 = Integer(53479); _sage_const_44771 = Integer(44771); _sage_const_43261 = Integer(43261); _sage_const_60757 = Integer(60757); _sage_const_59149 = Integer(59149); _sage_const_44729 = Integer(44729); _sage_const_36571 = Integer(36571); _sage_const_42533 = Integer(42533); _sage_const_59509 = Integer(59509); _sage_const_48337 = Integer(48337); _sage_const_43591 = Integer(43591); _sage_const_47933 = Integer(47933); _sage_const_53419 = Integer(53419); _sage_const_34747 = Integer(34747); _sage_const_58787 = Integer(58787); _sage_const_39397 = Integer(39397); _sage_const_48109 = Integer(48109); _sage_const_55987 = Integer(55987); _sage_const_36833 = Integer(36833); _sage_const_46439 = Integer(46439); _sage_const_163014145749020966527362866473385169718851721616099580892964038460874458300229566597051127131837727765676578472743831728487190199884657664763105462749319055787715119759660870245251139666933894434217213010123667901776317139730147215838019956603683024166830240694839515087101545941555671169130305164821949513799 = Integer(163014145749020966527362866473385169718851721616099580892964038460874458300229566597051127131837727765676578472743831728487190199884657664763105462749319055787715119759660870245251139666933894434217213010123667901776317139730147215838019956603683024166830240694839515087101545941555671169130305164821949513799); _sage_const_101429 = Integer(101429); _sage_const_70709 = Integer(70709); _sage_const_101573 = Integer(101573); _sage_const_130639 = Integer(130639); _sage_const_86239 = Integer(86239); _sage_const_70793 = Integer(70793); _sage_const_79181 = Integer(79181); _sage_const_110069 = Integer(110069); _sage_const_95911 = Integer(95911); _sage_const_91957 = Integer(91957); _sage_const_70271 = Integer(70271); _sage_const_128747 = Integer(128747); _sage_const_129527 = Integer(129527); _sage_const_37463 = Integer(37463); _sage_const_80737 = Integer(80737); _sage_const_88721 = Integer(88721); _sage_const_79687 = Integer(79687); _sage_const_74017 = Integer(74017); _sage_const_99923 = Integer(99923); _sage_const_125863 = Integer(125863); _sage_const_76481 = Integer(76481); _sage_const_96097 = Integer(96097); _sage_const_75079 = Integer(75079); _sage_const_94723 = Integer(94723); _sage_const_86453 = Integer(86453); _sage_const_100279 = Integer(100279); _sage_const_94201 = Integer(94201); _sage_const_40841 = Integer(40841); _sage_const_69761 = Integer(69761); _sage_const_86923 = Integer(86923); _sage_const_98963 = Integer(98963); _sage_const_72577 = Integer(72577); _sage_const_66301 = Integer(66301); _sage_const_71837 = Integer(71837); _sage_const_89917 = Integer(89917); _sage_const_71011 = Integer(71011); _sage_const_92143 = Integer(92143); _sage_const_86627 = Integer(86627); _sage_const_125921 = Integer(125921); _sage_const_90499 = Integer(90499); _sage_const_101267 = Integer(101267); _sage_const_129169 = Integer(129169); _sage_const_122827 = Integer(122827); _sage_const_127703 = Integer(127703); _sage_const_71999 = Integer(71999); _sage_const_106031 = Integer(106031); _sage_const_72613 = Integer(72613); _sage_const_77471 = Integer(77471); _sage_const_127763 = Integer(127763); _sage_const_122599 = Integer(122599); _sage_const_93479 = Integer(93479); _sage_const_119869 = Integer(119869); _sage_const_131009 = Integer(131009); _sage_const_71119 = Integer(71119); _sage_const_113749 = Integer(113749); _sage_const_124739 = Integer(124739); _sage_const_86257 = Integer(86257); _sage_const_96731 = Integer(96731); _sage_const_120193 = Integer(120193); _sage_const_122819 = Integer(122819); _sage_const_119027 = Integer(119027); _sage_const_124277 = Integer(124277); _sage_const_10230032503199327401627250197724560775036794598711422665723109931676519461895914673194564237493916409402558127512886358873803179536380707057619495689636200687781954441142174029241144881327227202661664191310764629981802657920761688261004112252169112426965031045536336715452675037702961365337153084172783532803944620209595563642571571582446196525253936276114792293498364692848661775627038690031115596892209486013286807489946833754362053483783351963874845312871919843366223439690687364781525787508405007854160604940091661277136966835886272138480439484770420207321578040718683150104120608394567288448245169695693978008067 = Integer(10230032503199327401627250197724560775036794598711422665723109931676519461895914673194564237493916409402558127512886358873803179536380707057619495689636200687781954441142174029241144881327227202661664191310764629981802657920761688261004112252169112426965031045536336715452675037702961365337153084172783532803944620209595563642571571582446196525253936276114792293498364692848661775627038690031115596892209486013286807489946833754362053483783351963874845312871919843366223439690687364781525787508405007854160604940091661277136966835886272138480439484770420207321578040718683150104120608394567288448245169695693978008067); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1)
import binascii

p = _sage_const_165904771154636133744258537155010957898841320976199637310247946276091086685264203988382040434355973963755682908150999129715814054881305005279715109357952947956732031939179558028421896612221813299929875548130332311862653487519381871784418328675201518221252865046296276946334529508065441554563296058286139050519 
p_factors = [_sage_const_2 , _sage_const_36479 , _sage_const_35291 , _sage_const_48847 , _sage_const_60509 , _sage_const_41411 , _sage_const_34337 , _sage_const_63059 , _sage_const_51307 , _sage_const_35069 , _sage_const_36353 , _sage_const_44449 , _sage_const_38677 , _sage_const_48073 , _sage_const_47869 , _sage_const_39313 , _sage_const_43987 , _sage_const_41953 , _sage_const_60859 , _sage_const_36653 , _sage_const_53527 , _sage_const_39443 , _sage_const_36467 , _sage_const_58511 , _sage_const_61403 , _sage_const_50821 , _sage_const_62233 , _sage_const_46153 , _sage_const_43313 , _sage_const_32969 , _sage_const_33871 , _sage_const_61211 , _sage_const_60127 , _sage_const_50153 , _sage_const_55339 , _sage_const_39581 , _sage_const_56501 , _sage_const_65537 , _sage_const_35023 , _sage_const_33199 , _sage_const_37277 , _sage_const_57037 , _sage_const_59651 , _sage_const_38501 , _sage_const_34057 , _sage_const_61949 , _sage_const_53773 , _sage_const_53479 , _sage_const_44771 , _sage_const_43261 , _sage_const_60757 , _sage_const_59149 , _sage_const_44729 , _sage_const_36571 , _sage_const_42533 , _sage_const_59509 , _sage_const_48337 , _sage_const_43591 , _sage_const_47933 , _sage_const_53419 , _sage_const_34747 , _sage_const_58787 , _sage_const_39397 , _sage_const_48109 , _sage_const_55987 , _sage_const_36833 , _sage_const_46439 ]
q = _sage_const_163014145749020966527362866473385169718851721616099580892964038460874458300229566597051127131837727765676578472743831728487190199884657664763105462749319055787715119759660870245251139666933894434217213010123667901776317139730147215838019956603683024166830240694839515087101545941555671169130305164821949513799 
q_factors = [_sage_const_2 , _sage_const_101429 , _sage_const_70709 , _sage_const_101573 , _sage_const_130639 , _sage_const_86239 , _sage_const_70793 , _sage_const_79181 , _sage_const_110069 , _sage_const_95911 , _sage_const_91957 , _sage_const_70271 , _sage_const_128747 , _sage_const_129527 , _sage_const_37463 , _sage_const_80737 , _sage_const_88721 , _sage_const_79687 , _sage_const_74017 , _sage_const_99923 , _sage_const_125863 , _sage_const_76481 , _sage_const_96097 , _sage_const_75079 , _sage_const_94723 , _sage_const_86453 , _sage_const_100279 , _sage_const_94201 , _sage_const_40841 , _sage_const_69761 , _sage_const_86923 , _sage_const_98963 , _sage_const_72577 , _sage_const_66301 , _sage_const_71837 , _sage_const_89917 , _sage_const_71011 , _sage_const_92143 , _sage_const_86627 , _sage_const_125921 , _sage_const_90499 , _sage_const_101267 , _sage_const_129169 , _sage_const_122827 , _sage_const_127703 , _sage_const_71999 , _sage_const_106031 , _sage_const_72613 , _sage_const_77471 , _sage_const_127763 , _sage_const_122599 , _sage_const_93479 , _sage_const_119869 , _sage_const_131009 , _sage_const_71119 , _sage_const_113749 , _sage_const_124739 , _sage_const_86257 , _sage_const_96731 , _sage_const_120193 , _sage_const_122819 , _sage_const_119027 , _sage_const_124277 ]

y = _sage_const_10230032503199327401627250197724560775036794598711422665723109931676519461895914673194564237493916409402558127512886358873803179536380707057619495689636200687781954441142174029241144881327227202661664191310764629981802657920761688261004112252169112426965031045536336715452675037702961365337153084172783532803944620209595563642571571582446196525253936276114792293498364692848661775627038690031115596892209486013286807489946833754362053483783351963874845312871919843366223439690687364781525787508405007854160604940091661277136966835886272138480439484770420207321578040718683150104120608394567288448245169695693978008067 
n = p * q

g = _sage_const_3 

dl_p = discrete_log(GF(p)(y), GF(p)(g))
dl_q = discrete_log(GF(q)(y), GF(q)(g))
private = int(crt([dl_p, dl_q], [p - _sage_const_1 , q - _sage_const_1 ]))
print(binascii.unhexlify(hex(private)[_sage_const_2 :]))

# # Pohlig-Hellman in (p-1)/2
# yp = y % p
# xp = 0
# xp_mod = 1
#
# for order in sorted(p_factors[1:]): # to remove the 2
#     # reduce the problem
#     new_problem = power_mod(yp, (p-1)//order, p)
#     # find a generator of that group
#     new_generator = power_mod(g, (p-1)//order, p)
#     # Pollard Rho
#     new_problem = GF(p)(new_problem)
#     new_generator = GF(p)(new_generator)
#     new_xp = discrete_log_rho(new_problem, new_generator, order)
#     #
#     xp = CRT(xp, new_xp, xp_mod, order)
#     xp_mod *= order
#
# # Pohlig-Hellman in (q-1)
# yq = y % q
# xq = 0
# xq_mod = 1
#
# for order in sorted(q_factors): # we need the 2
#     # reduce the problem
#     new_problem = power_mod(yq, (q-1)//order, q)
#     # find a generator of that grouq
#     new_generator = power_mod(g, (q-1)//order, q)
#     # Qollard Rho
#     new_problem = GF(q)(new_problem)
#     new_generator = GF(q)(new_generator)
#     new_xq = discrete_log_rho(new_problem, new_generator, order)
#     #
#     xq = CRT(xq, new_xq, xq_mod, order)
#     xq_mod *= order
#
# # CRT
# sol = CRT(xp, xq, xp_mod, xq_mod)
# print(sol)
# assert power_mod(3, sol, n) == y

# FLAG = 6761206136364956042543115511656117287459997182370725750216519365964645492075597809265459735465904421593434798989163735237601079093143075290768252231659823854613212550367058280764704659736260884494123474393197674396671222781050516498237888800855673625678996522915484034617335407132225828890304685522445069598071661190832280329336245887071550221185686663967281711429527620799501680188766322697854887670032916650514365631738478632013325671631118969640902867453845697430120429970284509265267396263861041846682825227522174532072701528643702538640622049297405723899758929478966589868728439511498980556467237071877156366590
# assert power_mod(3, FLAG, n) == y
# open("flag.txt", "wb").write((binascii.unhexlify(hex(FLAG)[2:])))
# if sol != FLAG:
#     print(FLAG)
# print(hex(FLAG))

